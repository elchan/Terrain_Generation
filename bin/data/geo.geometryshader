#version 400
uniform float minHeight;
uniform float maxHeight;
uniform float scale;
uniform int tess;
uniform int tessLevel;
uniform float far;
uniform float near;
uniform float imgPlane;
uniform vec3 camLoc;
uniform int poly;

//layout(location = 0) in vec4 position;
//layout(location = 10) in vec4 color;

in vec2 vs_texcoord[];
in float vs_lightIntensity[];

out vec2 gs_texcoord;
out float gs_lightIntensity;

layout(triangles) in;
layout (triangle_strip, max_vertices=128) out;


in vec4 GS_in_vertexColor[];
out vec4 FS_in_vertexColor;

 //out vec4 vertex_color;

 /*vec4 setColor(vec4 position)
 {
	vec4 FS_in_vertexColor;

 	float lscale = 1.0;
    float offset = position.z - minHeight*lscale;
    float heightDelta = maxHeight - minHeight*lscale;
    float normalizedOffset = offset / heightDelta;
    float normalizedHeight = position.z / (maxHeight*lscale);
    

	//normalizedHeight = 1 - normalizedHeight;
    FS_in_vertexColor = vec4(0,1,0,1);
    if (position.z < 0) {
        float normalizedHeightBlue = abs(position.z) / (maxHeight*lscale);
        FS_in_vertexColor = vec4(0,0,1-normalizedHeightBlue,1);
    }
    else {
        if (normalizedHeight > 0.8) {
            FS_in_vertexColor = vec4(0.7*normalizedHeight,0.7*normalizedHeight,0.7*normalizedHeight,1);
        }
        else if (normalizedHeight > 0.35) {
            FS_in_vertexColor = vec4(0.55*normalizedHeight,0.27*normalizedHeight,0.07*normalizedHeight,1);
        }
    }

	return FS_in_vertexColor;
 }*/

 vec4 divide (vec4 v1, vec4 v2)
 {
	return (v1+v2)/2;
	float x = (v1.x+v2.x)/2;
	float y = (v1.y+v2.y)/2;

	float z;

	if (poly != 1)
	{
		z = (v1.z+v2.z)/2;
	}
	else
	{
		z = ((v1.z*v1.z)+v2.z);
	}
	float w = 1;
	return vec4(x,y,z,w);

 }

void tessellate1(in vec4 v0, in vec4 v1, in vec4 v2, in int level, in int termlevel)
 {
			vec4 np0 = divide(v2,v1);
			vec4 np1 = divide(v0, v2);
			vec4 np2 = divide(v1,v0);

			

			gl_Position = v2;
			FS_in_vertexColor = GS_in_vertexColor[2];
			EmitVertex();

 			gl_Position = v0;
			FS_in_vertexColor = GS_in_vertexColor[0];
			EmitVertex();

			gl_Position = v1;
			FS_in_vertexColor = GS_in_vertexColor[1];
			EmitVertex();        
        
			gl_Position = np1;
			FS_in_vertexColor = (GS_in_vertexColor[0] + GS_in_vertexColor[2]) / 2;
			EmitVertex();

			gl_Position = np2;
			FS_in_vertexColor = (GS_in_vertexColor[1] + GS_in_vertexColor[0]) / 2;
			EmitVertex();

			gl_Position = np0;
			FS_in_vertexColor = (GS_in_vertexColor[2] + GS_in_vertexColor[1]) / 2;
			EmitVertex();

 }

 void tessellate2(in vec4 v0, in vec4 v1, in vec4 v2, in int level, in int termlevel)
 {
			vec4 np0 = divide(v2,v1);
			vec4 np1 = divide(v0, v2);
			vec4 np2 = divide(v1,v0);

 			gl_Position = v0;
			FS_in_vertexColor = GS_in_vertexColor[0];
			EmitVertex();

			gl_Position = v1;
			FS_in_vertexColor = GS_in_vertexColor[1];
			EmitVertex();
        
			gl_Position = v2;
			FS_in_vertexColor = GS_in_vertexColor[2];
			EmitVertex();
        
			gl_Position = np1;
			FS_in_vertexColor = (GS_in_vertexColor[0] + GS_in_vertexColor[2]) / 2;
			EmitVertex();

			gl_Position = np2;
			FS_in_vertexColor = (GS_in_vertexColor[1] + GS_in_vertexColor[0]) / 2;
			EmitVertex();

			gl_Position = np0;
			FS_in_vertexColor = (GS_in_vertexColor[2] + GS_in_vertexColor[1]) / 2;
			EmitVertex();

			
			tessellate1(v0,np2,np1,0,0);
			tessellate1(np2,v1,np0,0,0);			
			tessellate1(np1,np0,v2,0,0);
			tessellate1(np1,np2,np0,0,0);
}


void tessellate3(in vec4 v0, in vec4 v1, in vec4 v2, in int level, in int termlevel)
 {
			vec4 np0 = divide(v2,v1);
			vec4 np1 = divide(v0, v2);
			vec4 np2 = divide(v1,v0);

 			gl_Position = v0;
			FS_in_vertexColor = GS_in_vertexColor[0];
			EmitVertex();

			gl_Position = v1;
			FS_in_vertexColor = GS_in_vertexColor[1];
			EmitVertex();
        
			gl_Position = v2;
			FS_in_vertexColor = GS_in_vertexColor[2];
			EmitVertex();
        
			gl_Position = np1;
			FS_in_vertexColor = (GS_in_vertexColor[0] + GS_in_vertexColor[2]) / 2;
			EmitVertex();

			gl_Position = np2;
			FS_in_vertexColor = (GS_in_vertexColor[1] + GS_in_vertexColor[0]) / 2;
			EmitVertex();

			gl_Position = np0;
			FS_in_vertexColor = (GS_in_vertexColor[2] + GS_in_vertexColor[1]) / 2;
			EmitVertex();

			tessellate2(v0, np2, np1,0,0);
			tessellate2(np2, v1, np0,0,0);
			tessellate2(np2, np0, np1,0,0);
			tessellate2(np1, np0, v2,0,0);			
}


 void tessellate4(in vec4 v0, in vec4 v1, in vec4 v2, in int level, in int termlevel)
 {
			vec4 np0 = divide(v2,v1);
			vec4 np1 = divide(v0, v2);
			vec4 np2 = divide(v1,v0);

 			gl_Position = v0;
			FS_in_vertexColor = GS_in_vertexColor[0];
			EmitVertex();

			gl_Position = v1;
			FS_in_vertexColor = GS_in_vertexColor[1];
			EmitVertex();
        
			gl_Position = v2;
			FS_in_vertexColor = GS_in_vertexColor[2];
			EmitVertex();
        
			gl_Position = np1;
			FS_in_vertexColor = (GS_in_vertexColor[0] + GS_in_vertexColor[2]) / 2;
			EmitVertex();

			gl_Position = np2;
			FS_in_vertexColor = (GS_in_vertexColor[1] + GS_in_vertexColor[0]) / 2;
			EmitVertex();

			gl_Position = np0;
			FS_in_vertexColor = (GS_in_vertexColor[2] + GS_in_vertexColor[1]) / 2;
			EmitVertex();

			tessellate3(v0, np2, np1,0,0);
			tessellate3(np2, v1, np0,0,0);
			tessellate3(np2, np0, np1,0,0);
			tessellate3(np1, np0, v2,0,0);
}
/*
 void tessellate1(in vec4 v0, in vec4 v1, in vec4 v2, in int level, in int termlevel)
 {
			vec4 np0 = divide(v2,v1);
			vec4 np1 = divide(v0, v2);
			vec4 np2 = divide(v1,v0);

			
 			gl_Position = v0;
			FS_in_vertexColor = GS_in_vertexColor[0];
			EmitVertex();

			gl_Position = v1;
			FS_in_vertexColor = GS_in_vertexColor[1];
			EmitVertex();
        
			gl_Position = v2;
			FS_in_vertexColor = GS_in_vertexColor[2];
			EmitVertex();
        
			gl_Position = np0;
			FS_in_vertexColor = (GS_in_vertexColor[2] + GS_in_vertexColor[1]) / 2;
			EmitVertex();

			gl_Position = np1;
			FS_in_vertexColor = (GS_in_vertexColor[0] + GS_in_vertexColor[2]) / 2;
			EmitVertex();

			gl_Position = np2;
			FS_in_vertexColor = (GS_in_vertexColor[1] + GS_in_vertexColor[0]) / 2;
			EmitVertex();
 }

 void tessellate2(in vec4 v0, in vec4 v1, in vec4 v2, in int level, in int termlevel)
 {
			vec4 np0 = divide(v2,v1);
			vec4 np1 = divide(v0, v2);
			vec4 np2 = divide(v1,v0);

 			gl_Position = v0;
			FS_in_vertexColor = GS_in_vertexColor[0];
			EmitVertex();

			gl_Position = v1;
			FS_in_vertexColor = GS_in_vertexColor[1];
			EmitVertex();
        
			gl_Position = v2;
			FS_in_vertexColor = GS_in_vertexColor[2];
			EmitVertex();
        
			gl_Position = np0;
			FS_in_vertexColor = (GS_in_vertexColor[2] + GS_in_vertexColor[1]) / 2;
			EmitVertex();

			gl_Position = np1;
			FS_in_vertexColor = (GS_in_vertexColor[0] + GS_in_vertexColor[2]) / 2;
			EmitVertex();

			gl_Position = np2;
			FS_in_vertexColor = (GS_in_vertexColor[1] + GS_in_vertexColor[0]) / 2;
			EmitVertex();
			
			tessellate1(v0,np2,np1,0,0);
			tessellate1(np2,v1,np0,0,0);			
			tessellate1(np1,np0,v2,0,0);
			tessellate1(np1,np2,np0,0,0);
}


void tessellate3(in vec4 v0, in vec4 v1, in vec4 v2, in int level, in int termlevel)
 {
			vec4 np0 = divide(v2,v1);
			vec4 np1 = divide(v0, v2);
			vec4 np2 = divide(v1,v0);

 			gl_Position = v0;
			FS_in_vertexColor = GS_in_vertexColor[0];
			EmitVertex();

			gl_Position = v1;
			FS_in_vertexColor = GS_in_vertexColor[1];
			EmitVertex();
        
			gl_Position = v2;
			FS_in_vertexColor = GS_in_vertexColor[2];
			EmitVertex();
        
			gl_Position = np0;
			FS_in_vertexColor = (GS_in_vertexColor[2] + GS_in_vertexColor[1]) / 2;
			EmitVertex();

			gl_Position = np1;
			FS_in_vertexColor = (GS_in_vertexColor[0] + GS_in_vertexColor[2]) / 2;
			EmitVertex();

			gl_Position = np2;
			FS_in_vertexColor = (GS_in_vertexColor[1] + GS_in_vertexColor[0]) / 2;
			EmitVertex();

			tessellate2(v0, np2, np1,0,0);
			tessellate2(np2, v1, np0,0,0);
			tessellate2(np2, np0, np1,0,0);
			tessellate2(np1, np0, v2,0,0);			
}


 void tessellate4(in vec4 v0, in vec4 v1, in vec4 v2, in int level, in int termlevel)
 {
			vec4 np0 = divide(v2,v1);
			vec4 np1 = divide(v0, v2);
			vec4 np2 = divide(v1,v0);

 			gl_Position = v0;
			FS_in_vertexColor = GS_in_vertexColor[0];
			EmitVertex();

			gl_Position = v1;
			FS_in_vertexColor = GS_in_vertexColor[1];
			EmitVertex();
        
			gl_Position = v2;
			FS_in_vertexColor = GS_in_vertexColor[2];
			EmitVertex();
        
			gl_Position = np0;
			FS_in_vertexColor = (GS_in_vertexColor[2] + GS_in_vertexColor[1]) / 2;
			EmitVertex();

			gl_Position = np1;
			FS_in_vertexColor = (GS_in_vertexColor[0] + GS_in_vertexColor[2]) / 2;
			EmitVertex();

			gl_Position = np2;
			FS_in_vertexColor = (GS_in_vertexColor[1] + GS_in_vertexColor[0]) / 2;
			EmitVertex();

			tessellate3(v0, np2, np1,0,0);
			tessellate3(np2, v1, np0,0,0);
			tessellate3(np2, np0, np1,0,0);
			tessellate3(np1, np0, v2,0,0);
}
*/

void noTess()
{
	for (int i=0; i< gl_in.length(); i++)
	{
		gl_Position = gl_in[i].gl_Position;
		gs_texcoord = vs_texcoord[i] ; 
		gs_lightIntensity = vs_lightIntensity[i] ; 
		FS_in_vertexColor = GS_in_vertexColor[i];
		EmitVertex();
	}
}

void checkRange(in vec4 p0, in vec4 p1, in vec4 p2)
{
}

 void main()
{
		vec4 p0 = gl_in[0].gl_Position;
		vec4 p1 = gl_in[1].gl_Position;
		vec4 p2 = gl_in[2].gl_Position;

		int localTessLevel = tessLevel;

		if (localTessLevel == 0)
		{
			noTess();
		}
		else
		{
			float depth = far - near;
			int lvl =0;

			/**/
			if ((p0.z >=camLoc.y) && (p0.z < camLoc.y+200))	
			{
				tessellate3(p0,p1,p2,0,3);
			}

			if ((p0.z >=camLoc.y+200) && (p0.z < camLoc.y+400))	
			{
				tessellate2(p0,p1,p2,0,3);
			}

			if ((p0.z >=camLoc.y+400) && (p0.z < camLoc.y+600))	
			{
				tessellate1(p0,p1,p2,0,3);
			}

			if ((p0.z >camLoc.y+600))	
			{
				noTess();
			}
		}

	EndPrimitive();

}