#version 400
uniform float minHeight;
uniform float maxHeight;
uniform float scale;
uniform int tess;

//layout(location = 0) in vec4 position;
//layout(location = 10) in vec4 color;
 
layout(triangles) in;
layout (triangle_strip, max_vertices=6) out;

/* 
in VertexData {
    vec2 texCoord;
    vec3 normal;
} VertexIn[1];
*/

in vec4 GS_in_vertexColor[];
out vec4 FS_in_vertexColor;

out VertexData {
    vec2 texCoord;
    vec3 normal;
} VertexOut;
 
 //out vec4 vertex_color;

 vec4 setColor(vec4 position)
 {
	vec4 FS_in_vertexColor;

 	float lscale = 1.0;
    float offset = position.z - minHeight*lscale;
    float heightDelta = maxHeight - minHeight*lscale;
    float normalizedOffset = offset / heightDelta;
    float normalizedHeight = position.z / (maxHeight*lscale);
    

	//normalizedHeight = 1 - normalizedHeight;
    FS_in_vertexColor = vec4(0,1,0,1);
    if (position.z < 0) {
        float normalizedHeightBlue = abs(position.z) / (maxHeight*lscale);
        FS_in_vertexColor = vec4(0,0,1-normalizedHeightBlue,1);
    }
    else {
        if (normalizedHeight > 0.8) {
            FS_in_vertexColor = vec4(0.7*normalizedHeight,0.7*normalizedHeight,0.7*normalizedHeight,1);
        }
        else if (normalizedHeight > 0.35) {
            FS_in_vertexColor = vec4(0.55*normalizedHeight,0.27*normalizedHeight,0.07*normalizedHeight,1);
        }
    }

	return FS_in_vertexColor;
 }

 vec4 divide (vec4 v1, vec4 v2)
 {
		float x = (v1.x-v2.x)/2;
		float y = (v1.y-v2.y)/2;
		float z = (v1.z-v2.z)/2;
		float w = 1.0;

		return vec4(x,y,z,w);

 }

 void main()
{
//


		gl_Position = gl_in[0].gl_Position;
        FS_in_vertexColor = GS_in_vertexColor[0];
		EmitVertex();

		gl_Position = gl_in[1].gl_Position;
        FS_in_vertexColor = GS_in_vertexColor[1];
		EmitVertex();
        
		gl_Position = gl_in[2].gl_Position;
        FS_in_vertexColor = GS_in_vertexColor[2];
		EmitVertex();
        
        gl_Position = (gl_in[2].gl_Position + gl_in[1].gl_Position) / 2;
        FS_in_vertexColor = (GS_in_vertexColor[2] + GS_in_vertexColor[1]) / 2;
		EmitVertex();

		gl_Position = (gl_in[0].gl_Position + gl_in[2].gl_Position) / 2;
        FS_in_vertexColor = (GS_in_vertexColor[0] + GS_in_vertexColor[2]) / 2;
		EmitVertex();

		gl_Position = (gl_in[1].gl_Position + gl_in[0].gl_Position) / 2;
        FS_in_vertexColor = (GS_in_vertexColor[1] + GS_in_vertexColor[0]) / 2;
		EmitVertex();
//

//

//

//

//
//		
//		EndPrimitive();

}