#version 430
uniform float minHeight;
uniform float maxHeight;
uniform float maxX;
uniform float scale;
uniform int tess;
uniform int tessLevel;
uniform float far;
uniform float near;
uniform float imgPlane;
uniform vec3 tcamLoc;
uniform int poly;
uniform float camFOV;
uniform int camNam;

//uniform mat4 tesselationCamMVP;

#define PI 3.141592653


//layout(location = 0) in vec4 position;
//layout(location = 10) in vec4 color;


in vec2 vs_texcoord[];
in float vs_lightIntensity[];
in vec4 position_pretrans[];
in float vs_height[];

out vec2 gs_texcoord;
out float gs_lightIntensity;
out float height;


layout(triangles) in;
layout (triangle_strip, max_vertices=128) out;


 vec4 divide (vec4 v1, vec4 v2)
 {
	return (v1+v2)/2;
	float x = (v1.x+v2.x)/2;
	float y = (v1.y+v2.y)/2;

	float z;

	if (poly != 1)
	{
		z = (v1.z+v2.z)/2;
	}
	else
	{
		z = ((v1.z*v1.z)+v2.z);
	}
	float w = 1;
	return vec4(x,y,z,w);

 }

void tessellate1(in vec4 v0, in vec4 v1, in vec4 v2, in int level, in int termlevel)
 {
			vec4 np0 = divide(v2,v1);
			vec4 np1 = divide(v0, v2);
			vec4 np2 = divide(v1,v0);

			

			gl_Position = v2;
			gs_lightIntensity = vs_lightIntensity[2];
			gs_texcoord = vs_texcoord[2] ;
			height = vs_height[2];
			EmitVertex();

 			gl_Position = v0;
			gs_lightIntensity = vs_lightIntensity[0];
			gs_texcoord = vs_texcoord[0] ;
			height = vs_height[0];
			EmitVertex();

			gl_Position = v1;
			gs_lightIntensity = vs_lightIntensity[1];
			gs_texcoord = vs_texcoord[1] ;
			height = vs_height[1];
			EmitVertex();        
        
			gl_Position = np1;
			gs_lightIntensity = (vs_lightIntensity[0] + vs_lightIntensity[2]) / 2;
			gs_texcoord = (vs_texcoord[0] + vs_texcoord[2]) / 2 ;
			height = (vs_height[0]+ vs_height[2]) / 2 ;
			EmitVertex();

			gl_Position = np2;
			gs_lightIntensity = (vs_lightIntensity[1] + vs_lightIntensity[0]) / 2;
			gs_texcoord = (vs_texcoord[1] + vs_texcoord[0]) / 2 ;
			height = (vs_height[1]+ vs_height[0]) / 2 ;
			EmitVertex();

			gl_Position = np0;
			gs_lightIntensity = (vs_lightIntensity[2] + vs_lightIntensity[1]) / 2;
			gs_texcoord = (vs_texcoord[2] + vs_texcoord[1]) / 2 ;
			height = (vs_height[2]+ vs_height[1]) / 2 ;
			EmitVertex();

 }

 void tessellate2(in vec4 v0, in vec4 v1, in vec4 v2, in int level, in int termlevel)
 {
			vec4 np0 = divide(v2,v1);
			vec4 np1 = divide(v0, v2);
			vec4 np2 = divide(v1,v0);

 			gl_Position = v0;
			gs_lightIntensity = vs_lightIntensity[0];
			gs_texcoord = vs_texcoord[0] ;
			height = vs_height[0];
			EmitVertex();

			gl_Position = v1;
			gs_lightIntensity = vs_lightIntensity[1];
			gs_texcoord = vs_texcoord[1] ;
			height = vs_height[1];
			EmitVertex();
        
			gl_Position = v2;
			gs_lightIntensity = vs_lightIntensity[2];
			gs_texcoord = vs_texcoord[2] ;
			height = vs_height[2];
			EmitVertex();
        
			gl_Position = np1;
			gs_lightIntensity = (vs_lightIntensity[0] + vs_lightIntensity[2]) / 2;
			gs_texcoord = (vs_texcoord[0] + vs_texcoord[2]) / 2 ;
			height = (vs_height[0]+ vs_height[2]) / 2 ;
			EmitVertex();

			gl_Position = np2;
			gs_lightIntensity = (vs_lightIntensity[1] + vs_lightIntensity[0]) / 2;
			gs_texcoord = (vs_texcoord[1] + vs_texcoord[0]) / 2 ;
			height = (vs_height[1]+ vs_height[0]) / 2 ;
			EmitVertex();

			gl_Position = np0;
			gs_lightIntensity = (vs_lightIntensity[2] + vs_lightIntensity[1]) / 2;
			gs_texcoord = (vs_texcoord[2] + vs_texcoord[1]) / 2 ;
			height = (vs_height[2]+ vs_height[1]) / 2 ;
			EmitVertex();

			
			tessellate1(v0,np2,np1,0,0);
			tessellate1(np2,v1,np0,0,0);			
			tessellate1(np1,np0,v2,0,0);
			tessellate1(np1,np2,np0,0,0);
}


void tessellate3(in vec4 v0, in vec4 v1, in vec4 v2, in int level, in int termlevel)
 {
			vec4 np0 = divide(v2,v1);
			vec4 np1 = divide(v0, v2);
			vec4 np2 = divide(v1,v0);

 			gl_Position = v0;
			gs_lightIntensity = vs_lightIntensity[0];
			gs_texcoord = vs_texcoord[0] ;
			height = vs_height[0];
			EmitVertex();

			gl_Position = v1;
			gs_lightIntensity = vs_lightIntensity[1];
			gs_texcoord = vs_texcoord[1] ;
			height = vs_height[1];
			EmitVertex();
        
			gl_Position = v2;
			gs_lightIntensity = vs_lightIntensity[2];
			gs_texcoord = vs_texcoord[2] ;
			height = vs_height[2];
			EmitVertex();
        
			gl_Position = np1;
			gs_lightIntensity = (vs_lightIntensity[0] + vs_lightIntensity[2]) / 2;
			gs_texcoord = (vs_texcoord[0] + vs_texcoord[2]) / 2 ;
			height = (vs_height[0]+ vs_height[2]) / 2 ;
			EmitVertex();

			gl_Position = np2;
			gs_lightIntensity = (vs_lightIntensity[1] + vs_lightIntensity[0]) / 2;
			gs_texcoord = (vs_texcoord[1] + vs_texcoord[0]) / 2 ;
			height = (vs_height[1]+ vs_height[0]) / 2 ;
			EmitVertex();

			gl_Position = np0;
			gs_lightIntensity = (vs_lightIntensity[2] + vs_lightIntensity[1]) / 2;
			gs_texcoord = (vs_texcoord[2] + vs_texcoord[1]) / 2 ;
			height = (vs_height[2]+ vs_height[1]) / 2 ;
			EmitVertex();

			tessellate2(v0, np2, np1,0,0);
			tessellate2(np2, v1, np0,0,0);
			tessellate2(np2, np0, np1,0,0);
			tessellate2(np1, np0, v2,0,0);			
}


 void tessellate4(in vec4 v0, in vec4 v1, in vec4 v2, in int level, in int termlevel)
 {
			vec4 np0 = divide(v2,v1);
			vec4 np1 = divide(v0, v2);
			vec4 np2 = divide(v1,v0);

 			gl_Position = v0;
			gs_lightIntensity = vs_lightIntensity[0];
			gs_texcoord = vs_texcoord[0] ;
			height = vs_height[0];
			EmitVertex();

			gl_Position = v1;
			gs_lightIntensity = vs_lightIntensity[1];
			gs_texcoord = vs_texcoord[1] ;
			height = vs_height[1];
			EmitVertex();
        
			gl_Position = v2;
			gs_lightIntensity = vs_lightIntensity[2];
			gs_texcoord = vs_texcoord[2] ;
			height = vs_height[2];
			EmitVertex();
        
			gl_Position = np1;
			gs_lightIntensity = (vs_lightIntensity[0] + vs_lightIntensity[2]) / 2;
			gs_texcoord = (vs_texcoord[0] + vs_texcoord[2]) / 2 ;
			height = (vs_height[0]+ vs_height[2]) / 2 ;
			EmitVertex();

			gl_Position = np2;
			gs_lightIntensity = (vs_lightIntensity[1] + vs_lightIntensity[0]) / 2;
			gs_texcoord = (vs_texcoord[1] + vs_texcoord[0]) / 2 ;
			height = (vs_height[1]+ vs_height[0]) / 2 ;
			EmitVertex();

			gl_Position = np0;
			gs_lightIntensity = (vs_lightIntensity[2] + vs_lightIntensity[1]) / 2;
			gs_texcoord = (vs_texcoord[2] + vs_texcoord[1]) / 2 ;
			height = (vs_height[2]+ vs_height[1]) / 2 ;
			EmitVertex();

			tessellate3(v0, np2, np1,0,0);
			tessellate3(np2, v1, np0,0,0);
			tessellate3(np2, np0, np1,0,0);
			tessellate3(np1, np0, v2,0,0);
}
/*
 void tessellate1(in vec4 v0, in vec4 v1, in vec4 v2, in int level, in int termlevel)
 {
			vec4 np0 = divide(v2,v1);
			vec4 np1 = divide(v0, v2);
			vec4 np2 = divide(v1,v0);

			
 			gl_Position = v0;
			gs_lightIntensity = vs_lightIntensity[0];
			gs_texcoord = vs_texcoord[0] ;
			EmitVertex();

			gl_Position = v1;
			gs_lightIntensity = vs_lightIntensity[1];
			gs_texcoord = vs_texcoord[1] ;
			EmitVertex();
        
			gl_Position = v2;
			gs_lightIntensity = vs_lightIntensity[2];
			gs_texcoord = vs_texcoord[2] ;
			EmitVertex();
        
			gl_Position = np0;
			gs_lightIntensity = (vs_lightIntensity[2] + vs_lightIntensity[1]) / 2;
			gs_texcoord = (vs_texcoord[2] + vs_texcoord[1]) / 2 ;
			EmitVertex();

			gl_Position = np1;
			gs_lightIntensity = (vs_lightIntensity[0] + vs_lightIntensity[2]) / 2;
			gs_texcoord = (vs_texcoord[0] + vs_texcoord[2]) / 2 ;
			EmitVertex();

			gl_Position = np2;
			gs_lightIntensity = (vs_lightIntensity[1] + vs_lightIntensity[0]) / 2;
			gs_texcoord = (vs_texcoord[1] + vs_texcoord[0]) / 2 ;
			EmitVertex();
 }

 void tessellate2(in vec4 v0, in vec4 v1, in vec4 v2, in int level, in int termlevel)
 {
			vec4 np0 = divide(v2,v1);
			vec4 np1 = divide(v0, v2);
			vec4 np2 = divide(v1,v0);

 			gl_Position = v0;
			gs_lightIntensity = vs_lightIntensity[0];
			gs_texcoord = vs_texcoord[0] ;
			EmitVertex();

			gl_Position = v1;
			gs_lightIntensity = vs_lightIntensity[1];
			gs_texcoord = vs_texcoord[1] ;
			EmitVertex();
        
			gl_Position = v2;
			gs_lightIntensity = vs_lightIntensity[2];
			gs_texcoord = vs_texcoord[2] ;
			EmitVertex();
        
			gl_Position = np0;
			gs_lightIntensity = (vs_lightIntensity[2] + vs_lightIntensity[1]) / 2;
			gs_texcoord = (vs_texcoord[2] + vs_texcoord[1]) / 2 ;
			EmitVertex();

			gl_Position = np1;
			gs_lightIntensity = (vs_lightIntensity[0] + vs_lightIntensity[2]) / 2;
			gs_texcoord = (vs_texcoord[0] + vs_texcoord[2]) / 2 ;
			EmitVertex();

			gl_Position = np2;
			gs_lightIntensity = (vs_lightIntensity[1] + vs_lightIntensity[0]) / 2;
			gs_texcoord = (vs_texcoord[1] + vs_texcoord[0]) / 2 ;
			EmitVertex();
			
			tessellate1(v0,np2,np1,0,0);
			tessellate1(np2,v1,np0,0,0);			
			tessellate1(np1,np0,v2,0,0);
			tessellate1(np1,np2,np0,0,0);
}


void tessellate3(in vec4 v0, in vec4 v1, in vec4 v2, in int level, in int termlevel)
 {
			vec4 np0 = divide(v2,v1);
			vec4 np1 = divide(v0, v2);
			vec4 np2 = divide(v1,v0);

 			gl_Position = v0;
			gs_lightIntensity = vs_lightIntensity[0];
			gs_texcoord = vs_texcoord[0] ;

			EmitVertex();

			gl_Position = v1;
			gs_lightIntensity = vs_lightIntensity[1];
			gs_texcoord = vs_texcoord[1] ;
			EmitVertex();
        
			gl_Position = v2;
			gs_lightIntensity = vs_lightIntensity[2];
			gs_texcoord = vs_texcoord[2] ;
			EmitVertex();
        
			gl_Position = np0;
			gs_lightIntensity = (vs_lightIntensity[2] + vs_lightIntensity[1]) / 2;
			gs_texcoord = (vs_texcoord[2] + vs_texcoord[1]) / 2 ;
			EmitVertex();

			gl_Position = np1;
			gs_lightIntensity = (vs_lightIntensity[0] + vs_lightIntensity[2]) / 2;
			gs_texcoord = (vs_texcoord[0] + vs_texcoord[2]) / 2 ;
			EmitVertex();

			gl_Position = np2;
			gs_lightIntensity = (vs_lightIntensity[1] + vs_lightIntensity[0]) / 2;
			gs_texcoord = (vs_texcoord[1] + vs_texcoord[0]) / 2 ;
			EmitVertex();

			tessellate2(v0, np2, np1,0,0);
			tessellate2(np2, v1, np0,0,0);
			tessellate2(np2, np0, np1,0,0);
			tessellate2(np1, np0, v2,0,0);			
}


 void tessellate4(in vec4 v0, in vec4 v1, in vec4 v2, in int level, in int termlevel)
 {
			vec4 np0 = divide(v2,v1);
			vec4 np1 = divide(v0, v2);
			vec4 np2 = divide(v1,v0);

 			gl_Position = v0;
			gs_lightIntensity = vs_lightIntensity[0];
			gs_texcoord = vs_texcoord[0] ;
			EmitVertex();

			gl_Position = v1;
			gs_lightIntensity = vs_lightIntensity[1];
			gs_texcoord = vs_texcoord[1] ;
			EmitVertex();
        
			gl_Position = v2;
			gs_lightIntensity = vs_lightIntensity[2];
			gs_texcoord = vs_texcoord[2] ;
			EmitVertex();
        
			gl_Position = np0;
			gs_lightIntensity = (vs_lightIntensity[2] + vs_lightIntensity[1]) / 2;
			gs_texcoord = (vs_texcoord[2] + vs_texcoord[1]) / 2 ;
			EmitVertex();

			gl_Position = np1;
			gs_lightIntensity = (vs_lightIntensity[0] + vs_lightIntensity[2]) / 2;
			gs_texcoord = (vs_texcoord[0] + vs_texcoord[2]) / 2 ;
			EmitVertex();

			gl_Position = np2;
			gs_lightIntensity = (vs_lightIntensity[1] + vs_lightIntensity[0]) / 2;
			gs_texcoord = (vs_texcoord[1] + vs_texcoord[0]) / 2 ;
			EmitVertex();

			tessellate3(v0, np2, np1,0,0);
			tessellate3(np2, v1, np0,0,0);
			tessellate3(np2, np0, np1,0,0);
			tessellate3(np1, np0, v2,0,0);
}
*/

void noTess()
{
	for (int i=0; i< gl_in.length(); i++)
	{
		gl_Position = gl_in[i].gl_Position;
		gs_texcoord = vs_texcoord[i] ; 
		gs_lightIntensity =  vs_lightIntensity[i] ; 
		//gs_lightIntensity =  0. ; 
		height = vs_height[i] ;
		EmitVertex();
	}
}

bool checkInFOV(vec3 vloc, vec3 cloc, float fov, float r1, float r2)
{
	if (camNam == 2)
	{
		if (vloc.y > cloc.y) return false; //Vertex is behind camera
	}
	else
	{
		if (vloc.y < cloc.y) return false; //Vertex is behind camera
	}

	vec2 sqr = cloc.xy + vloc.xy;
	float fovrad = ((fov)/360)*(2*PI);
	float radius = sqrt( (sqr.x*sqr.x)+ (sqr.y*sqr.y));
	float x = r1*cos(fovrad);
	float y = r1*sin(fovrad);

	x = vloc.x;
	y = vloc.y;

	float rad = (tan(sqr.x/sqr.y)); // In radians
	bool inFOV = true;

	
	if (((rad) > fovrad))
	{
		inFOV = false;
	}
	

	if (((radius >=r1) && (radius < r2)) && inFOV)
	{
		return true;
	}
	else
	{
		return false;
	}
}

 void main()
{
		vec4 p0 = gl_in[0].gl_Position;
		//vec4 p0 = position_pretrans[0];
		vec4 p1 = gl_in[1].gl_Position;
		vec4 p2 = gl_in[2].gl_Position;

    //vec4 projP0 = tesselationCamMVP * p0;
		int localTessLevel = tessLevel;

		if (localTessLevel == 0)
		{
			noTess();
		}
		else
		{
		/*
		float edge = (2*maxX)*(2*maxX);
		float r1 = 0*sqrt(edge);
		float r2 = .11*sqrt(edge);
		float r3 = .33*sqrt(edge);
		float r4 = 1.*sqrt(edge);
		*/

		
		float r1 = 0;
		float r2 = 256;
		float r3 = 384;
		float r4 = 512;
		

	  if (checkInFOV(p1.xyz, tcamLoc.xyz, camFOV, r1, r2))
	  {
		tessellate3(p0,p1,p2,0,3);
	  }
	  else if (checkInFOV(p1.xyz, tcamLoc.xyz, camFOV, r2, r3))

	  {
		tessellate2(p0,p1,p2,0,3);
	  }
	  else if (checkInFOV(p1.xyz, tcamLoc.xyz, camFOV, r3, r4))
	  {
		tessellate1(p0,p1,p2,0,3);
	  }
	  else
	  {
		noTess();
	  }
	}

	EndPrimitive();

}